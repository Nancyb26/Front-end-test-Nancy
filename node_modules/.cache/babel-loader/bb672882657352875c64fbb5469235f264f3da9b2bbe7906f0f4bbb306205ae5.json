{"ast":null,"code":"// import React, { useState, useMemo } from \"react\";\n// import {\n//   TableCell,\n//   TableContainer,\n//   TableRow,\n//   Paper,\n//   Menu,\n//   MenuItem,\n//   Box,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n// } from \"@mui/material\";\n// import { TableVirtuoso } from \"react-virtuoso\";\n// import FilterAltIcon from \"@mui/icons-material/FilterAlt\";\n// import AddIcon from \"@mui/icons-material/Add\";\n// import Pagination from \"@mui/material/Pagination\";\n// import \"../styles.css\";\n// import TableHeader from \"./TableHeader\";\n\n// const rowsPerPage = 50;\n\n// const columns = [\n//   { label: \"Timestamp\", dataKey: \"reading_ts\", width: 150 },\n//   { label: \"Sensor Type\", dataKey: \"sensor_type\", width: 150 },\n//   { label: \"Box ID\", dataKey: \"box_id\", width: 150 },\n//   { label: \"Name\", dataKey: \"name\", width: 150 },\n//   { label: \"Reading\", dataKey: \"reading\", width: 150, numeric: true },\n//   { label: \"Unit\", dataKey: \"unit\", width: 100 },\n//   { label: \"Location (Lat, Lon)\", dataKey: \"location\", width: 250 },\n// ];\n\n// const VirtuosoTableComponents = {\n//   Scroller: React.forwardRef((props, ref) => (\n//     <TableContainer\n//       component={Paper}\n//       {...props}\n//       ref={ref}\n//       className=\"table-container\"\n//     />\n//   )),\n//   Table: (props) => <table {...props} className=\"table\" />,\n//   TableHead: React.forwardRef((props, ref) => <thead {...props} ref={ref} />),\n//   TableRow: (props) => <tr {...props} />,\n//   TableBody: React.forwardRef((props, ref) => <tbody {...props} ref={ref} />),\n// };\n\n// function SensorTable({ data, onSort, sortBy, sortOrder, onNewSensor }) {\n//   const [page, setPage] = useState(0);\n//   const [filter, setFilter] = useState(\"\");\n//   const [anchorEl, setAnchorEl] = useState(null);\n//   const [dialogOpen, setDialogOpen] = useState(false);\n\n//   const [newSensor, setNewSensor] = useState({\n//     reading_ts: \"\",\n//     sensor_type: \"\",\n//     box_id: \"\",\n//     name: \"\",\n//     reading: \"\",\n//     unit: \"\",\n//     latitude: \"\",\n//     longitude: \"\",\n//   });\n\n//   const handlePageChange = (event, value) => {\n//     setPage(value - 1);\n//   };\n\n//   const filteredData = useMemo(() => {\n//     if (!filter) return data;\n\n//     return data.filter(\n//       (item) =>\n//         item.sensor_type.toLowerCase().includes(filter.toLowerCase()) ||\n//         item.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }, [data, filter]);\n\n//   const paginatedData = useMemo(\n//     () => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage),\n//     [filteredData, page]\n//   );\n\n//   const startIndex = page * rowsPerPage + 1;\n//   const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n\n//   const fixedHeaderContent = () => (\n//     <TableRow>\n//       {columns.map((column) => (\n//         <TableHeader\n//           key={column.dataKey}\n//           column={column}\n//           isActive={\n//             sortBy ===\n//             (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\")\n//           }\n//           sortOrder={sortOrder}\n//           onSort={onSort}\n//         />\n//       ))}\n//     </TableRow>\n//   );\n\n//   const rowContent = (_index, sensor) =>\n//     columns.map((column) => {\n//       const value =\n//         column.dataKey === \"location\"\n//           ? `${sensor.latitude}, ${sensor.longitude}`\n//           : sensor[column.dataKey];\n//       return (\n//         <TableCell\n//           key={column.dataKey}\n//           className={`table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`}\n//         >\n//           {value}\n//         </TableCell>\n//       );\n//     });\n\n//   const handleMenuClick = (event) => {\n//     setAnchorEl(event.currentTarget);\n//   };\n\n//   const handleMenuClose = () => {\n//     setAnchorEl(null);\n//   };\n\n//   const handleFilter = (value) => {\n//     setFilter(value);\n//     handleMenuClose();\n//   };\n\n//   const handleDialogOpen = () => {\n//     setDialogOpen(true);\n//   };\n\n//   const handleDialogClose = () => {\n//     setDialogOpen(false);\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewSensor({ ...newSensor, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddSensor = () => {\n//     onNewSensor(newSensor);\n//     setNewSensor({\n//       reading_ts: \"\",\n//       sensor_type: \"\",\n//       box_id: \"\",\n//       name: \"\",\n//       reading: \"\",\n//       unit: \"\",\n//       latitude: \"\",\n//       longitude: \"\",\n//     });\n//     handleDialogClose();\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f5f5f5\",\n//       }}\n//     >\n//       <Box\n//         sx={{\n//           backgroundColor: \"white\",\n//           padding: \"9px\",\n//           boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n//           marginBottom: \"0px\",\n//         }}\n//       >\n//         <h1\n//           style={{\n//             margin: 0,\n//             textAlign: \"center\",\n//             color: \"white\",\n//             fontFamily: \"'Poppins', sans-serif\",\n//             background: \"linear-gradient(135deg, #ff4942, #ff7966)\",\n//             padding: \"20px 0\",\n//             borderRadius: \"12px\",\n//             boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.25)\",\n//             fontSize: \"2.5rem\",\n//             letterSpacing: \"1.5px\",\n//             textTransform: \"uppercase\",\n//             lineHeight: \"1.2\",\n//           }}\n//         >\n//           Environmental Sensor Dashboard\n//         </h1>\n\n//         <Box\n//           sx={{\n//             display: \"flex\",\n//             justifyContent: \"space-between\",\n//             alignItems: \"center\",\n//             marginTop: \"20px\",\n//           }}\n//         >\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//             <Button\n//               variant=\"outlined\"\n//               startIcon={<FilterAltIcon />}\n//               onClick={handleMenuClick}\n//               sx={{\n//                 textTransform: \"none\",\n//                 borderColor: \"#ff4942\",\n//                 color: \"#ff4942\",\n//                 \"&:hover\": {\n//                   borderColor: \"#ff4942\",\n//                   backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//                 },\n//               }}\n//             >\n//               Filter\n//             </Button>\n\n//             {filter && (\n//               <Button\n//                 variant=\"contained\"\n//                 onClick={() => setFilter(\"\")}\n//                 sx={{\n//                   backgroundColor: \"#ff7966\",\n//                   color: \"#fff\",\n//                   textTransform: \"none\",\n//                   \"&:hover\": {\n//                     backgroundColor: \"#ff4942\",\n//                   },\n//                 }}\n//               >\n//                 {filter}{\" \"}\n//                 <span style={{ marginLeft: \"8px\", cursor: \"pointer\" }}>âœ•</span>\n//               </Button>\n//             )}\n//           </Box>\n\n//           <Button\n//             variant=\"outlined\"\n//             startIcon={<AddIcon />}\n//             onClick={handleDialogOpen}\n//             sx={{\n//               textTransform: \"none\",\n//               borderColor: \"#ff4942\",\n//               color: \"#ff4942\",\n//               \"&:hover\": {\n//                 borderColor: \"#ff4942\",\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Add New Data\n//           </Button>\n//         </Box>\n//       </Box>\n\n//       <Menu\n//         anchorEl={anchorEl}\n//         open={Boolean(anchorEl)}\n//         onClose={handleMenuClose}\n//       >\n//         <MenuItem onClick={() => handleFilter(\"\")}>All</MenuItem>\n//         {[...new Set(data.map((item) => item.sensor_type))].map((type) => (\n//           <MenuItem key={type} onClick={() => handleFilter(type)}>\n//             {type}\n//           </MenuItem>\n//         ))}\n//       </Menu>\n\n//       <Dialog open={dialogOpen} onClose={handleDialogClose}>\n//         <DialogTitle>Add New Sensor Data</DialogTitle>\n//         <DialogContent>\n//           {Object.keys(newSensor).map((field) => (\n//             <TextField\n//               key={field}\n//               name={field}\n//               label={field.replace(\"_\", \" \").toUpperCase()}\n//               value={newSensor[field]}\n//               onChange={handleInputChange}\n//               fullWidth\n//               margin=\"dense\"\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button\n//             onClick={handleDialogClose}\n//             sx={{\n//               color: \"#ff4942\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button\n//             variant=\"contained\"\n//             onClick={handleAddSensor}\n//             sx={{\n//               backgroundColor: \"#ff4942\",\n//               color: \"#fff\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"#e9433d\",\n//               },\n//             }}\n//           >\n//             Add Sensor\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       <Paper style={{ flexGrow: 1, width: \"100%\", marginTop: \"0px\" }}>\n//         <TableVirtuoso\n//           data={paginatedData}\n//           components={VirtuosoTableComponents}\n//           fixedHeaderContent={fixedHeaderContent}\n//           itemContent={rowContent}\n//         />\n//       </Paper>\n\n//       <Box\n//         sx={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           padding: \"10px 20px\",\n//         }}\n//       >\n//         <span>\n//           {startIndex}-{endIndex} of {filteredData.length}\n//         </span>\n//         <Pagination\n//           count={Math.ceil(filteredData.length / rowsPerPage)}\n//           page={page + 1}\n//           onChange={handlePageChange}\n//           color=\"primary\"\n//           sx={{\n//             \"ul > li > button.Mui-selected\": {\n//               backgroundColor: \"#ff7966\",\n//               opacity: 0.8,\n//             },\n//           }}\n//         />\n//       </Box>\n//     </div>\n//   );\n// }\n\n// export default SensorTable;","map":{"version":3,"names":[],"sources":["/Users/nancy/Documents/Front-end-test-Nancy/src/components/SensorTable.js"],"sourcesContent":["// import React, { useState, useMemo } from \"react\";\n// import {\n//   TableCell,\n//   TableContainer,\n//   TableRow,\n//   Paper,\n//   Menu,\n//   MenuItem,\n//   Box,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n// } from \"@mui/material\";\n// import { TableVirtuoso } from \"react-virtuoso\";\n// import FilterAltIcon from \"@mui/icons-material/FilterAlt\";\n// import AddIcon from \"@mui/icons-material/Add\";\n// import Pagination from \"@mui/material/Pagination\";\n// import \"../styles.css\";\n// import TableHeader from \"./TableHeader\";\n\n// const rowsPerPage = 50;\n\n// const columns = [\n//   { label: \"Timestamp\", dataKey: \"reading_ts\", width: 150 },\n//   { label: \"Sensor Type\", dataKey: \"sensor_type\", width: 150 },\n//   { label: \"Box ID\", dataKey: \"box_id\", width: 150 },\n//   { label: \"Name\", dataKey: \"name\", width: 150 },\n//   { label: \"Reading\", dataKey: \"reading\", width: 150, numeric: true },\n//   { label: \"Unit\", dataKey: \"unit\", width: 100 },\n//   { label: \"Location (Lat, Lon)\", dataKey: \"location\", width: 250 },\n// ];\n\n// const VirtuosoTableComponents = {\n//   Scroller: React.forwardRef((props, ref) => (\n//     <TableContainer\n//       component={Paper}\n//       {...props}\n//       ref={ref}\n//       className=\"table-container\"\n//     />\n//   )),\n//   Table: (props) => <table {...props} className=\"table\" />,\n//   TableHead: React.forwardRef((props, ref) => <thead {...props} ref={ref} />),\n//   TableRow: (props) => <tr {...props} />,\n//   TableBody: React.forwardRef((props, ref) => <tbody {...props} ref={ref} />),\n// };\n\n// function SensorTable({ data, onSort, sortBy, sortOrder, onNewSensor }) {\n//   const [page, setPage] = useState(0);\n//   const [filter, setFilter] = useState(\"\");\n//   const [anchorEl, setAnchorEl] = useState(null);\n//   const [dialogOpen, setDialogOpen] = useState(false);\n\n//   const [newSensor, setNewSensor] = useState({\n//     reading_ts: \"\",\n//     sensor_type: \"\",\n//     box_id: \"\",\n//     name: \"\",\n//     reading: \"\",\n//     unit: \"\",\n//     latitude: \"\",\n//     longitude: \"\",\n//   });\n\n//   const handlePageChange = (event, value) => {\n//     setPage(value - 1);\n//   };\n\n//   const filteredData = useMemo(() => {\n//     if (!filter) return data;\n\n//     return data.filter(\n//       (item) =>\n//         item.sensor_type.toLowerCase().includes(filter.toLowerCase()) ||\n//         item.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }, [data, filter]);\n\n//   const paginatedData = useMemo(\n//     () => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage),\n//     [filteredData, page]\n//   );\n\n//   const startIndex = page * rowsPerPage + 1;\n//   const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n\n//   const fixedHeaderContent = () => (\n//     <TableRow>\n//       {columns.map((column) => (\n//         <TableHeader\n//           key={column.dataKey}\n//           column={column}\n//           isActive={\n//             sortBy ===\n//             (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\")\n//           }\n//           sortOrder={sortOrder}\n//           onSort={onSort}\n//         />\n//       ))}\n//     </TableRow>\n//   );\n\n//   const rowContent = (_index, sensor) =>\n//     columns.map((column) => {\n//       const value =\n//         column.dataKey === \"location\"\n//           ? `${sensor.latitude}, ${sensor.longitude}`\n//           : sensor[column.dataKey];\n//       return (\n//         <TableCell\n//           key={column.dataKey}\n//           className={`table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`}\n//         >\n//           {value}\n//         </TableCell>\n//       );\n//     });\n\n//   const handleMenuClick = (event) => {\n//     setAnchorEl(event.currentTarget);\n//   };\n\n//   const handleMenuClose = () => {\n//     setAnchorEl(null);\n//   };\n\n//   const handleFilter = (value) => {\n//     setFilter(value);\n//     handleMenuClose();\n//   };\n\n//   const handleDialogOpen = () => {\n//     setDialogOpen(true);\n//   };\n\n//   const handleDialogClose = () => {\n//     setDialogOpen(false);\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewSensor({ ...newSensor, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddSensor = () => {\n//     onNewSensor(newSensor);\n//     setNewSensor({\n//       reading_ts: \"\",\n//       sensor_type: \"\",\n//       box_id: \"\",\n//       name: \"\",\n//       reading: \"\",\n//       unit: \"\",\n//       latitude: \"\",\n//       longitude: \"\",\n//     });\n//     handleDialogClose();\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f5f5f5\",\n//       }}\n//     >\n//       <Box\n//         sx={{\n//           backgroundColor: \"white\",\n//           padding: \"9px\",\n//           boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n//           marginBottom: \"0px\",\n//         }}\n//       >\n//         <h1\n//           style={{\n//             margin: 0,\n//             textAlign: \"center\",\n//             color: \"white\",\n//             fontFamily: \"'Poppins', sans-serif\",\n//             background: \"linear-gradient(135deg, #ff4942, #ff7966)\",\n//             padding: \"20px 0\",\n//             borderRadius: \"12px\",\n//             boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.25)\",\n//             fontSize: \"2.5rem\",\n//             letterSpacing: \"1.5px\",\n//             textTransform: \"uppercase\",\n//             lineHeight: \"1.2\",\n//           }}\n//         >\n//           Environmental Sensor Dashboard\n//         </h1>\n\n//         <Box\n//           sx={{\n//             display: \"flex\",\n//             justifyContent: \"space-between\",\n//             alignItems: \"center\",\n//             marginTop: \"20px\",\n//           }}\n//         >\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//             <Button\n//               variant=\"outlined\"\n//               startIcon={<FilterAltIcon />}\n//               onClick={handleMenuClick}\n//               sx={{\n//                 textTransform: \"none\",\n//                 borderColor: \"#ff4942\",\n//                 color: \"#ff4942\",\n//                 \"&:hover\": {\n//                   borderColor: \"#ff4942\",\n//                   backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//                 },\n//               }}\n//             >\n//               Filter\n//             </Button>\n\n//             {filter && (\n//               <Button\n//                 variant=\"contained\"\n//                 onClick={() => setFilter(\"\")}\n//                 sx={{\n//                   backgroundColor: \"#ff7966\",\n//                   color: \"#fff\",\n//                   textTransform: \"none\",\n//                   \"&:hover\": {\n//                     backgroundColor: \"#ff4942\",\n//                   },\n//                 }}\n//               >\n//                 {filter}{\" \"}\n//                 <span style={{ marginLeft: \"8px\", cursor: \"pointer\" }}>âœ•</span>\n//               </Button>\n//             )}\n//           </Box>\n\n//           <Button\n//             variant=\"outlined\"\n//             startIcon={<AddIcon />}\n//             onClick={handleDialogOpen}\n//             sx={{\n//               textTransform: \"none\",\n//               borderColor: \"#ff4942\",\n//               color: \"#ff4942\",\n//               \"&:hover\": {\n//                 borderColor: \"#ff4942\",\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Add New Data\n//           </Button>\n//         </Box>\n//       </Box>\n\n//       <Menu\n//         anchorEl={anchorEl}\n//         open={Boolean(anchorEl)}\n//         onClose={handleMenuClose}\n//       >\n//         <MenuItem onClick={() => handleFilter(\"\")}>All</MenuItem>\n//         {[...new Set(data.map((item) => item.sensor_type))].map((type) => (\n//           <MenuItem key={type} onClick={() => handleFilter(type)}>\n//             {type}\n//           </MenuItem>\n//         ))}\n//       </Menu>\n\n//       <Dialog open={dialogOpen} onClose={handleDialogClose}>\n//         <DialogTitle>Add New Sensor Data</DialogTitle>\n//         <DialogContent>\n//           {Object.keys(newSensor).map((field) => (\n//             <TextField\n//               key={field}\n//               name={field}\n//               label={field.replace(\"_\", \" \").toUpperCase()}\n//               value={newSensor[field]}\n//               onChange={handleInputChange}\n//               fullWidth\n//               margin=\"dense\"\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button\n//             onClick={handleDialogClose}\n//             sx={{\n//               color: \"#ff4942\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button\n//             variant=\"contained\"\n//             onClick={handleAddSensor}\n//             sx={{\n//               backgroundColor: \"#ff4942\",\n//               color: \"#fff\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"#e9433d\",\n//               },\n//             }}\n//           >\n//             Add Sensor\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       <Paper style={{ flexGrow: 1, width: \"100%\", marginTop: \"0px\" }}>\n//         <TableVirtuoso\n//           data={paginatedData}\n//           components={VirtuosoTableComponents}\n//           fixedHeaderContent={fixedHeaderContent}\n//           itemContent={rowContent}\n//         />\n//       </Paper>\n\n//       <Box\n//         sx={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           padding: \"10px 20px\",\n//         }}\n//       >\n//         <span>\n//           {startIndex}-{endIndex} of {filteredData.length}\n//         </span>\n//         <Pagination\n//           count={Math.ceil(filteredData.length / rowsPerPage)}\n//           page={page + 1}\n//           onChange={handlePageChange}\n//           color=\"primary\"\n//           sx={{\n//             \"ul > li > button.Mui-selected\": {\n//               backgroundColor: \"#ff7966\",\n//               opacity: 0.8,\n//             },\n//           }}\n//         />\n//       </Box>\n//     </div>\n//   );\n// }\n\n// export default SensorTable;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}