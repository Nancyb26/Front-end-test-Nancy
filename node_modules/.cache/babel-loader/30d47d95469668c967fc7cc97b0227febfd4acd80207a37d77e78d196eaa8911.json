{"ast":null,"code":"var _jsxFileName = \"/Users/nancy/Documents/Front-end-test-Nancy/src/components/SensorTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useMemo } from \"react\";\n// import {\n//   TableCell,\n//   TableContainer,\n//   TableRow,\n//   Paper,\n//   Menu,\n//   MenuItem,\n//   Box,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n// } from \"@mui/material\";\n// import { TableVirtuoso } from \"react-virtuoso\";\n// import FilterAltIcon from \"@mui/icons-material/FilterAlt\";\n// import AddIcon from \"@mui/icons-material/Add\";\n// import Pagination from \"@mui/material/Pagination\";\n// import \"../styles.css\";\n// import TableHeader from \"./TableHeader\";\n\n// const rowsPerPage = 50;\n\n// const columns = [\n//   { label: \"Timestamp\", dataKey: \"reading_ts\", width: 150 },\n//   { label: \"Sensor Type\", dataKey: \"sensor_type\", width: 150 },\n//   { label: \"Box ID\", dataKey: \"box_id\", width: 150 },\n//   { label: \"Name\", dataKey: \"name\", width: 150 },\n//   { label: \"Reading\", dataKey: \"reading\", width: 150, numeric: true },\n//   { label: \"Unit\", dataKey: \"unit\", width: 100 },\n//   { label: \"Location (Lat, Lon)\", dataKey: \"location\", width: 250 },\n// ];\n\n// const VirtuosoTableComponents = {\n//   Scroller: React.forwardRef((props, ref) => (\n//     <TableContainer\n//       component={Paper}\n//       {...props}\n//       ref={ref}\n//       className=\"table-container\"\n//     />\n//   )),\n//   Table: (props) => <table {...props} className=\"table\" />,\n//   TableHead: React.forwardRef((props, ref) => <thead {...props} ref={ref} />),\n//   TableRow: (props) => <tr {...props} />,\n//   TableBody: React.forwardRef((props, ref) => <tbody {...props} ref={ref} />),\n// };\n\n// function SensorTable({ data, onSort, sortBy, sortOrder, onNewSensor }) {\n//   const [page, setPage] = useState(0);\n//   const [filter, setFilter] = useState(\"\");\n//   const [anchorEl, setAnchorEl] = useState(null);\n//   const [dialogOpen, setDialogOpen] = useState(false);\n\n//   const [newSensor, setNewSensor] = useState({\n//     reading_ts: \"\",\n//     sensor_type: \"\",\n//     box_id: \"\",\n//     name: \"\",\n//     reading: \"\",\n//     unit: \"\",\n//     latitude: \"\",\n//     longitude: \"\",\n//   });\n\n//   const handlePageChange = (event, value) => {\n//     setPage(value - 1);\n//   };\n\n//   const filteredData = useMemo(() => {\n//     if (!filter) return data;\n\n//     return data.filter(\n//       (item) =>\n//         item.sensor_type.toLowerCase().includes(filter.toLowerCase()) ||\n//         item.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }, [data, filter]);\n\n//   const paginatedData = useMemo(\n//     () => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage),\n//     [filteredData, page]\n//   );\n\n//   const startIndex = page * rowsPerPage + 1;\n//   const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n\n//   const fixedHeaderContent = () => (\n//     <TableRow>\n//       {columns.map((column) => (\n//         <TableHeader\n//           key={column.dataKey}\n//           column={column}\n//           isActive={\n//             sortBy ===\n//             (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\")\n//           }\n//           sortOrder={sortOrder}\n//           onSort={onSort}\n//         />\n//       ))}\n//     </TableRow>\n//   );\n\n//   const rowContent = (_index, sensor) =>\n//     columns.map((column) => {\n//       const value =\n//         column.dataKey === \"location\"\n//           ? `${sensor.latitude}, ${sensor.longitude}`\n//           : sensor[column.dataKey];\n//       return (\n//         <TableCell\n//           key={column.dataKey}\n//           className={`table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`}\n//         >\n//           {value}\n//         </TableCell>\n//       );\n//     });\n\n//   const handleMenuClick = (event) => {\n//     setAnchorEl(event.currentTarget);\n//   };\n\n//   const handleMenuClose = () => {\n//     setAnchorEl(null);\n//   };\n\n//   const handleFilter = (value) => {\n//     setFilter(value);\n//     handleMenuClose();\n//   };\n\n//   const handleDialogOpen = () => {\n//     setDialogOpen(true);\n//   };\n\n//   const handleDialogClose = () => {\n//     setDialogOpen(false);\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewSensor({ ...newSensor, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddSensor = () => {\n//     onNewSensor(newSensor);\n//     setNewSensor({\n//       reading_ts: \"\",\n//       sensor_type: \"\",\n//       box_id: \"\",\n//       name: \"\",\n//       reading: \"\",\n//       unit: \"\",\n//       latitude: \"\",\n//       longitude: \"\",\n//     });\n//     handleDialogClose();\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f5f5f5\",\n//       }}\n//     >\n//       <Box\n//         sx={{\n//           backgroundColor: \"white\",\n//           padding: \"9px\",\n//           boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n//           marginBottom: \"0px\",\n//         }}\n//       >\n//         <h1\n//           style={{\n//             margin: 0,\n//             textAlign: \"center\",\n//             color: \"white\",\n//             fontFamily: \"'Poppins', sans-serif\",\n//             background: \"linear-gradient(135deg, #ff4942, #ff7966)\",\n//             padding: \"20px 0\",\n//             borderRadius: \"12px\",\n//             boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.25)\",\n//             fontSize: \"2.5rem\",\n//             letterSpacing: \"1.5px\",\n//             textTransform: \"uppercase\",\n//             lineHeight: \"1.2\",\n//           }}\n//         >\n//           Environmental Sensor Dashboard\n//         </h1>\n\n//         <Box\n//           sx={{\n//             display: \"flex\",\n//             justifyContent: \"space-between\",\n//             alignItems: \"center\",\n//             marginTop: \"20px\",\n//           }}\n//         >\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//             <Button\n//               variant=\"outlined\"\n//               startIcon={<FilterAltIcon />}\n//               onClick={handleMenuClick}\n//               sx={{\n//                 textTransform: \"none\",\n//                 borderColor: \"#ff4942\",\n//                 color: \"#ff4942\",\n//                 \"&:hover\": {\n//                   borderColor: \"#ff4942\",\n//                   backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//                 },\n//               }}\n//             >\n//               Filter\n//             </Button>\n\n//             {filter && (\n//               <Button\n//                 variant=\"contained\"\n//                 onClick={() => setFilter(\"\")}\n//                 sx={{\n//                   backgroundColor: \"#ff7966\",\n//                   color: \"#fff\",\n//                   textTransform: \"none\",\n//                   \"&:hover\": {\n//                     backgroundColor: \"#ff4942\",\n//                   },\n//                 }}\n//               >\n//                 {filter}{\" \"}\n//                 <span style={{ marginLeft: \"8px\", cursor: \"pointer\" }}>âœ•</span>\n//               </Button>\n//             )}\n//           </Box>\n\n//           <Button\n//             variant=\"outlined\"\n//             startIcon={<AddIcon />}\n//             onClick={handleDialogOpen}\n//             sx={{\n//               textTransform: \"none\",\n//               borderColor: \"#ff4942\",\n//               color: \"#ff4942\",\n//               \"&:hover\": {\n//                 borderColor: \"#ff4942\",\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Add New Data\n//           </Button>\n//         </Box>\n//       </Box>\n\n//       <Menu\n//         anchorEl={anchorEl}\n//         open={Boolean(anchorEl)}\n//         onClose={handleMenuClose}\n//       >\n//         <MenuItem onClick={() => handleFilter(\"\")}>All</MenuItem>\n//         {[...new Set(data.map((item) => item.sensor_type))].map((type) => (\n//           <MenuItem key={type} onClick={() => handleFilter(type)}>\n//             {type}\n//           </MenuItem>\n//         ))}\n//       </Menu>\n\n//       <Dialog open={dialogOpen} onClose={handleDialogClose}>\n//         <DialogTitle>Add New Sensor Data</DialogTitle>\n//         <DialogContent>\n//           {Object.keys(newSensor).map((field) => (\n//             <TextField\n//               key={field}\n//               name={field}\n//               label={field.replace(\"_\", \" \").toUpperCase()}\n//               value={newSensor[field]}\n//               onChange={handleInputChange}\n//               fullWidth\n//               margin=\"dense\"\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button\n//             onClick={handleDialogClose}\n//             sx={{\n//               color: \"#ff4942\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button\n//             variant=\"contained\"\n//             onClick={handleAddSensor}\n//             sx={{\n//               backgroundColor: \"#ff4942\",\n//               color: \"#fff\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"#e9433d\",\n//               },\n//             }}\n//           >\n//             Add Sensor\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       <Paper style={{ flexGrow: 1, width: \"100%\", marginTop: \"0px\" }}>\n//         <TableVirtuoso\n//           data={paginatedData}\n//           components={VirtuosoTableComponents}\n//           fixedHeaderContent={fixedHeaderContent}\n//           itemContent={rowContent}\n//         />\n//       </Paper>\n\n//       <Box\n//         sx={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           padding: \"10px 20px\",\n//         }}\n//       >\n//         <span>\n//           {startIndex}-{endIndex} of {filteredData.length}\n//         </span>\n//         <Pagination\n//           count={Math.ceil(filteredData.length / rowsPerPage)}\n//           page={page + 1}\n//           onChange={handlePageChange}\n//           color=\"primary\"\n//           sx={{\n//             \"ul > li > button.Mui-selected\": {\n//               backgroundColor: \"#ff7966\",\n//               opacity: 0.8,\n//             },\n//           }}\n//         />\n//       </Box>\n//     </div>\n//   );\n// }\n\n// export default SensorTable;\n\nimport React, { useState, useMemo } from \"react\";\nimport { TableCell, TableContainer, TableRow, Paper, Menu, MenuItem, Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField } from \"@mui/material\";\nimport { TableVirtuoso } from \"react-virtuoso\";\nimport FilterAltIcon from \"@mui/icons-material/FilterAlt\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Pagination from \"@mui/material/Pagination\";\nimport \"../styles.css\";\nimport TableHeader from \"./TableHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rowsPerPage = 50;\nconst columns = [{\n  label: \"Timestamp\",\n  dataKey: \"reading_ts\",\n  width: 150\n}, {\n  label: \"Sensor Type\",\n  dataKey: \"sensor_type\",\n  width: 150\n}, {\n  label: \"Box ID\",\n  dataKey: \"box_id\",\n  width: 150\n}, {\n  label: \"Name\",\n  dataKey: \"name\",\n  width: 150\n}, {\n  label: \"Reading\",\n  dataKey: \"reading\",\n  width: 150,\n  numeric: true\n}, {\n  label: \"Unit\",\n  dataKey: \"unit\",\n  width: 100\n}, {\n  label: \"Location (Lat, Lon)\",\n  dataKey: \"location\",\n  width: 250\n}];\nconst VirtuosoTableComponents = {\n  Scroller: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    ...props,\n    ref: ref,\n    className: \"table-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this)),\n  Table: props => /*#__PURE__*/_jsxDEV(\"table\", {\n    ...props,\n    className: \"table\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 21\n  }, this),\n  TableHead: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(\"thead\", {\n    ...props,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 47\n  }, this)),\n  TableRow: props => /*#__PURE__*/_jsxDEV(\"tr\", {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 24\n  }, this),\n  TableBody: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(\"tbody\", {\n    ...props,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 47\n  }, this))\n};\nfunction SensorTable({\n  data,\n  onSort,\n  sortBy,\n  sortOrder,\n  onNewSensor\n}) {\n  _s();\n  const [page, setPage] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [newSensor, setNewSensor] = useState({\n    reading_ts: \"\",\n    sensor_type: \"\",\n    box_id: \"\",\n    name: \"\",\n    reading: \"\",\n    unit: \"\",\n    latitude: \"\",\n    longitude: \"\"\n  });\n  const handlePageChange = (event, value) => {\n    setPage(value - 1);\n  };\n  const filteredData = useMemo(() => {\n    if (!filter) return data;\n    return data.filter(item => item.sensor_type.toLowerCase().includes(filter.toLowerCase()) || item.name.toLowerCase().includes(filter.toLowerCase()));\n  }, [data, filter]);\n  const paginatedData = useMemo(() => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage), [filteredData, page]);\n  const startIndex = page * rowsPerPage + 1;\n  const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n  const fixedHeaderContent = () => /*#__PURE__*/_jsxDEV(TableRow, {\n    children: columns.map(column => /*#__PURE__*/_jsxDEV(TableHeader, {\n      column: column,\n      isActive: sortBy === (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\"),\n      sortOrder: sortOrder,\n      onSort: onSort\n    }, column.dataKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 5\n  }, this);\n  const rowContent = (_index, sensor) => columns.map(column => {\n    const value = column.dataKey === \"location\" ? `${sensor.latitude}, ${sensor.longitude}` : sensor[column.dataKey];\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      className: `table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`,\n      children: value\n    }, column.dataKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 9\n    }, this);\n  });\n  const handleMenuClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n  const handleFilter = value => {\n    setFilter(value);\n    handleMenuClose();\n  };\n  const handleDialogOpen = () => {\n    setDialogOpen(true);\n  };\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n  const handleInputChange = e => {\n    setNewSensor({\n      ...newSensor,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddSensor = () => {\n    onNewSensor(newSensor);\n    setNewSensor({\n      reading_ts: \"\",\n      sensor_type: \"\",\n      box_id: \"\",\n      name: \"\",\n      reading: \"\",\n      unit: \"\",\n      latitude: \"\",\n      longitude: \"\"\n    });\n    handleDialogClose();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-table-container\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"header-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"header-title\",\n        children: \"Environmental Sensor Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"header-actions\",\n        children: [/*#__PURE__*/_jsxDEV(FilterButton, {\n          filter: filter,\n          onFilter: handleFilter,\n          onMenuClick: handleMenuClick,\n          anchorEl: anchorEl,\n          onMenuClose: handleMenuClose,\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddButton, {\n          onClick: handleDialogOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SensorDialog, {\n      open: dialogOpen,\n      onClose: handleDialogClose,\n      newSensor: newSensor,\n      onInputChange: handleInputChange,\n      onAddSensor: handleAddSensor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"table-paper\",\n      children: /*#__PURE__*/_jsxDEV(TableVirtuoso, {\n        data: paginatedData,\n        components: VirtuosoTableComponents,\n        fixedHeaderContent: fixedHeaderContent,\n        itemContent: rowContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"pagination-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [startIndex, \"-\", endIndex, \" of \", filteredData.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        count: Math.ceil(filteredData.length / rowsPerPage),\n        page: page + 1,\n        onChange: handlePageChange,\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n}\n_s(SensorTable, \"KkGelFBgb6GJ/LRDfhYVTaQLmhs=\");\n_c = SensorTable;\nexport default SensorTable;\nvar _c;\n$RefreshReg$(_c, \"SensorTable\");","map":{"version":3,"names":["React","useState","useMemo","TableCell","TableContainer","TableRow","Paper","Menu","MenuItem","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","TableVirtuoso","FilterAltIcon","AddIcon","Pagination","TableHeader","jsxDEV","_jsxDEV","rowsPerPage","columns","label","dataKey","width","numeric","VirtuosoTableComponents","Scroller","forwardRef","props","ref","component","className","fileName","_jsxFileName","lineNumber","columnNumber","Table","TableHead","TableBody","SensorTable","data","onSort","sortBy","sortOrder","onNewSensor","_s","page","setPage","filter","setFilter","anchorEl","setAnchorEl","dialogOpen","setDialogOpen","newSensor","setNewSensor","reading_ts","sensor_type","box_id","name","reading","unit","latitude","longitude","handlePageChange","event","value","filteredData","item","toLowerCase","includes","paginatedData","slice","startIndex","endIndex","Math","min","length","fixedHeaderContent","children","map","column","isActive","rowContent","_index","sensor","handleMenuClick","currentTarget","handleMenuClose","handleFilter","handleDialogOpen","handleDialogClose","handleInputChange","e","target","handleAddSensor","FilterButton","onFilter","onMenuClick","onMenuClose","AddButton","onClick","SensorDialog","open","onClose","onInputChange","onAddSensor","components","itemContent","count","ceil","onChange","color","_c","$RefreshReg$"],"sources":["/Users/nancy/Documents/Front-end-test-Nancy/src/components/SensorTable.js"],"sourcesContent":["// import React, { useState, useMemo } from \"react\";\n// import {\n//   TableCell,\n//   TableContainer,\n//   TableRow,\n//   Paper,\n//   Menu,\n//   MenuItem,\n//   Box,\n//   Button,\n//   TextField,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n// } from \"@mui/material\";\n// import { TableVirtuoso } from \"react-virtuoso\";\n// import FilterAltIcon from \"@mui/icons-material/FilterAlt\";\n// import AddIcon from \"@mui/icons-material/Add\";\n// import Pagination from \"@mui/material/Pagination\";\n// import \"../styles.css\";\n// import TableHeader from \"./TableHeader\";\n\n// const rowsPerPage = 50;\n\n// const columns = [\n//   { label: \"Timestamp\", dataKey: \"reading_ts\", width: 150 },\n//   { label: \"Sensor Type\", dataKey: \"sensor_type\", width: 150 },\n//   { label: \"Box ID\", dataKey: \"box_id\", width: 150 },\n//   { label: \"Name\", dataKey: \"name\", width: 150 },\n//   { label: \"Reading\", dataKey: \"reading\", width: 150, numeric: true },\n//   { label: \"Unit\", dataKey: \"unit\", width: 100 },\n//   { label: \"Location (Lat, Lon)\", dataKey: \"location\", width: 250 },\n// ];\n\n// const VirtuosoTableComponents = {\n//   Scroller: React.forwardRef((props, ref) => (\n//     <TableContainer\n//       component={Paper}\n//       {...props}\n//       ref={ref}\n//       className=\"table-container\"\n//     />\n//   )),\n//   Table: (props) => <table {...props} className=\"table\" />,\n//   TableHead: React.forwardRef((props, ref) => <thead {...props} ref={ref} />),\n//   TableRow: (props) => <tr {...props} />,\n//   TableBody: React.forwardRef((props, ref) => <tbody {...props} ref={ref} />),\n// };\n\n// function SensorTable({ data, onSort, sortBy, sortOrder, onNewSensor }) {\n//   const [page, setPage] = useState(0);\n//   const [filter, setFilter] = useState(\"\");\n//   const [anchorEl, setAnchorEl] = useState(null);\n//   const [dialogOpen, setDialogOpen] = useState(false);\n\n//   const [newSensor, setNewSensor] = useState({\n//     reading_ts: \"\",\n//     sensor_type: \"\",\n//     box_id: \"\",\n//     name: \"\",\n//     reading: \"\",\n//     unit: \"\",\n//     latitude: \"\",\n//     longitude: \"\",\n//   });\n\n//   const handlePageChange = (event, value) => {\n//     setPage(value - 1);\n//   };\n\n//   const filteredData = useMemo(() => {\n//     if (!filter) return data;\n\n//     return data.filter(\n//       (item) =>\n//         item.sensor_type.toLowerCase().includes(filter.toLowerCase()) ||\n//         item.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }, [data, filter]);\n\n//   const paginatedData = useMemo(\n//     () => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage),\n//     [filteredData, page]\n//   );\n\n//   const startIndex = page * rowsPerPage + 1;\n//   const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n\n//   const fixedHeaderContent = () => (\n//     <TableRow>\n//       {columns.map((column) => (\n//         <TableHeader\n//           key={column.dataKey}\n//           column={column}\n//           isActive={\n//             sortBy ===\n//             (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\")\n//           }\n//           sortOrder={sortOrder}\n//           onSort={onSort}\n//         />\n//       ))}\n//     </TableRow>\n//   );\n\n//   const rowContent = (_index, sensor) =>\n//     columns.map((column) => {\n//       const value =\n//         column.dataKey === \"location\"\n//           ? `${sensor.latitude}, ${sensor.longitude}`\n//           : sensor[column.dataKey];\n//       return (\n//         <TableCell\n//           key={column.dataKey}\n//           className={`table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`}\n//         >\n//           {value}\n//         </TableCell>\n//       );\n//     });\n\n//   const handleMenuClick = (event) => {\n//     setAnchorEl(event.currentTarget);\n//   };\n\n//   const handleMenuClose = () => {\n//     setAnchorEl(null);\n//   };\n\n//   const handleFilter = (value) => {\n//     setFilter(value);\n//     handleMenuClose();\n//   };\n\n//   const handleDialogOpen = () => {\n//     setDialogOpen(true);\n//   };\n\n//   const handleDialogClose = () => {\n//     setDialogOpen(false);\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewSensor({ ...newSensor, [e.target.name]: e.target.value });\n//   };\n\n//   const handleAddSensor = () => {\n//     onNewSensor(newSensor);\n//     setNewSensor({\n//       reading_ts: \"\",\n//       sensor_type: \"\",\n//       box_id: \"\",\n//       name: \"\",\n//       reading: \"\",\n//       unit: \"\",\n//       latitude: \"\",\n//       longitude: \"\",\n//     });\n//     handleDialogClose();\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f5f5f5\",\n//       }}\n//     >\n//       <Box\n//         sx={{\n//           backgroundColor: \"white\",\n//           padding: \"9px\",\n//           boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n//           marginBottom: \"0px\",\n//         }}\n//       >\n//         <h1\n//           style={{\n//             margin: 0,\n//             textAlign: \"center\",\n//             color: \"white\",\n//             fontFamily: \"'Poppins', sans-serif\",\n//             background: \"linear-gradient(135deg, #ff4942, #ff7966)\",\n//             padding: \"20px 0\",\n//             borderRadius: \"12px\",\n//             boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.25)\",\n//             fontSize: \"2.5rem\",\n//             letterSpacing: \"1.5px\",\n//             textTransform: \"uppercase\",\n//             lineHeight: \"1.2\",\n//           }}\n//         >\n//           Environmental Sensor Dashboard\n//         </h1>\n\n//         <Box\n//           sx={{\n//             display: \"flex\",\n//             justifyContent: \"space-between\",\n//             alignItems: \"center\",\n//             marginTop: \"20px\",\n//           }}\n//         >\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//             <Button\n//               variant=\"outlined\"\n//               startIcon={<FilterAltIcon />}\n//               onClick={handleMenuClick}\n//               sx={{\n//                 textTransform: \"none\",\n//                 borderColor: \"#ff4942\",\n//                 color: \"#ff4942\",\n//                 \"&:hover\": {\n//                   borderColor: \"#ff4942\",\n//                   backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//                 },\n//               }}\n//             >\n//               Filter\n//             </Button>\n\n//             {filter && (\n//               <Button\n//                 variant=\"contained\"\n//                 onClick={() => setFilter(\"\")}\n//                 sx={{\n//                   backgroundColor: \"#ff7966\",\n//                   color: \"#fff\",\n//                   textTransform: \"none\",\n//                   \"&:hover\": {\n//                     backgroundColor: \"#ff4942\",\n//                   },\n//                 }}\n//               >\n//                 {filter}{\" \"}\n//                 <span style={{ marginLeft: \"8px\", cursor: \"pointer\" }}>âœ•</span>\n//               </Button>\n//             )}\n//           </Box>\n\n//           <Button\n//             variant=\"outlined\"\n//             startIcon={<AddIcon />}\n//             onClick={handleDialogOpen}\n//             sx={{\n//               textTransform: \"none\",\n//               borderColor: \"#ff4942\",\n//               color: \"#ff4942\",\n//               \"&:hover\": {\n//                 borderColor: \"#ff4942\",\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Add New Data\n//           </Button>\n//         </Box>\n//       </Box>\n\n//       <Menu\n//         anchorEl={anchorEl}\n//         open={Boolean(anchorEl)}\n//         onClose={handleMenuClose}\n//       >\n//         <MenuItem onClick={() => handleFilter(\"\")}>All</MenuItem>\n//         {[...new Set(data.map((item) => item.sensor_type))].map((type) => (\n//           <MenuItem key={type} onClick={() => handleFilter(type)}>\n//             {type}\n//           </MenuItem>\n//         ))}\n//       </Menu>\n\n//       <Dialog open={dialogOpen} onClose={handleDialogClose}>\n//         <DialogTitle>Add New Sensor Data</DialogTitle>\n//         <DialogContent>\n//           {Object.keys(newSensor).map((field) => (\n//             <TextField\n//               key={field}\n//               name={field}\n//               label={field.replace(\"_\", \" \").toUpperCase()}\n//               value={newSensor[field]}\n//               onChange={handleInputChange}\n//               fullWidth\n//               margin=\"dense\"\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button\n//             onClick={handleDialogClose}\n//             sx={{\n//               color: \"#ff4942\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"rgba(255, 73, 66, 0.1)\",\n//               },\n//             }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button\n//             variant=\"contained\"\n//             onClick={handleAddSensor}\n//             sx={{\n//               backgroundColor: \"#ff4942\",\n//               color: \"#fff\",\n//               textTransform: \"none\",\n//               \"&:hover\": {\n//                 backgroundColor: \"#e9433d\",\n//               },\n//             }}\n//           >\n//             Add Sensor\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       <Paper style={{ flexGrow: 1, width: \"100%\", marginTop: \"0px\" }}>\n//         <TableVirtuoso\n//           data={paginatedData}\n//           components={VirtuosoTableComponents}\n//           fixedHeaderContent={fixedHeaderContent}\n//           itemContent={rowContent}\n//         />\n//       </Paper>\n\n//       <Box\n//         sx={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           padding: \"10px 20px\",\n//         }}\n//       >\n//         <span>\n//           {startIndex}-{endIndex} of {filteredData.length}\n//         </span>\n//         <Pagination\n//           count={Math.ceil(filteredData.length / rowsPerPage)}\n//           page={page + 1}\n//           onChange={handlePageChange}\n//           color=\"primary\"\n//           sx={{\n//             \"ul > li > button.Mui-selected\": {\n//               backgroundColor: \"#ff7966\",\n//               opacity: 0.8,\n//             },\n//           }}\n//         />\n//       </Box>\n//     </div>\n//   );\n// }\n\n// export default SensorTable;\n\nimport React, { useState, useMemo } from \"react\";\nimport {\n  TableCell,\n  TableContainer,\n  TableRow,\n  Paper,\n  Menu,\n  MenuItem,\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\nimport { TableVirtuoso } from \"react-virtuoso\";\nimport FilterAltIcon from \"@mui/icons-material/FilterAlt\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Pagination from \"@mui/material/Pagination\";\nimport \"../styles.css\";\nimport TableHeader from \"./TableHeader\";\n\nconst rowsPerPage = 50;\n\nconst columns = [\n  { label: \"Timestamp\", dataKey: \"reading_ts\", width: 150 },\n  { label: \"Sensor Type\", dataKey: \"sensor_type\", width: 150 },\n  { label: \"Box ID\", dataKey: \"box_id\", width: 150 },\n  { label: \"Name\", dataKey: \"name\", width: 150 },\n  { label: \"Reading\", dataKey: \"reading\", width: 150, numeric: true },\n  { label: \"Unit\", dataKey: \"unit\", width: 100 },\n  { label: \"Location (Lat, Lon)\", dataKey: \"location\", width: 250 },\n];\n\nconst VirtuosoTableComponents = {\n  Scroller: React.forwardRef((props, ref) => (\n    <TableContainer\n      component={Paper}\n      {...props}\n      ref={ref}\n      className=\"table-container\"\n    />\n  )),\n  Table: (props) => <table {...props} className=\"table\" />,\n  TableHead: React.forwardRef((props, ref) => <thead {...props} ref={ref} />),\n  TableRow: (props) => <tr {...props} />,\n  TableBody: React.forwardRef((props, ref) => <tbody {...props} ref={ref} />),\n};\n\nfunction SensorTable({ data, onSort, sortBy, sortOrder, onNewSensor }) {\n  const [page, setPage] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const [newSensor, setNewSensor] = useState({\n    reading_ts: \"\",\n    sensor_type: \"\",\n    box_id: \"\",\n    name: \"\",\n    reading: \"\",\n    unit: \"\",\n    latitude: \"\",\n    longitude: \"\",\n  });\n\n  const handlePageChange = (event, value) => {\n    setPage(value - 1);\n  };\n\n  const filteredData = useMemo(() => {\n    if (!filter) return data;\n\n    return data.filter(\n      (item) =>\n        item.sensor_type.toLowerCase().includes(filter.toLowerCase()) ||\n        item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [data, filter]);\n\n  const paginatedData = useMemo(\n    () => filteredData.slice(page * rowsPerPage, (page + 1) * rowsPerPage),\n    [filteredData, page]\n  );\n\n  const startIndex = page * rowsPerPage + 1;\n  const endIndex = Math.min((page + 1) * rowsPerPage, filteredData.length);\n\n  const fixedHeaderContent = () => (\n    <TableRow>\n      {columns.map((column) => (\n        <TableHeader\n          key={column.dataKey}\n          column={column}\n          isActive={\n            sortBy ===\n            (column.dataKey === \"reading_ts\" ? \"time\" : \"sensor_type\")\n          }\n          sortOrder={sortOrder}\n          onSort={onSort}\n        />\n      ))}\n    </TableRow>\n  );\n\n  const rowContent = (_index, sensor) =>\n    columns.map((column) => {\n      const value =\n        column.dataKey === \"location\"\n          ? `${sensor.latitude}, ${sensor.longitude}`\n          : sensor[column.dataKey];\n      return (\n        <TableCell\n          key={column.dataKey}\n          className={`table-cell ${column.numeric ? \"table-cell-right\" : \"\"}`}\n        >\n          {value}\n        </TableCell>\n      );\n    });\n\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleFilter = (value) => {\n    setFilter(value);\n    handleMenuClose();\n  };\n\n  const handleDialogOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleInputChange = (e) => {\n    setNewSensor({ ...newSensor, [e.target.name]: e.target.value });\n  };\n\n  const handleAddSensor = () => {\n    onNewSensor(newSensor);\n    setNewSensor({\n      reading_ts: \"\",\n      sensor_type: \"\",\n      box_id: \"\",\n      name: \"\",\n      reading: \"\",\n      unit: \"\",\n      latitude: \"\",\n      longitude: \"\",\n    });\n    handleDialogClose();\n  };\n\n  return (\n    <div className=\"sensor-table-container\">\n      <Box className=\"header-box\">\n        <h1 className=\"header-title\">Environmental Sensor Dashboard</h1>\n        <Box className=\"header-actions\">\n          <FilterButton\n            filter={filter}\n            onFilter={handleFilter}\n            onMenuClick={handleMenuClick}\n            anchorEl={anchorEl}\n            onMenuClose={handleMenuClose}\n            data={data}\n          />\n          <AddButton onClick={handleDialogOpen} />\n        </Box>\n      </Box>\n\n      <SensorDialog\n        open={dialogOpen}\n        onClose={handleDialogClose}\n        newSensor={newSensor}\n        onInputChange={handleInputChange}\n        onAddSensor={handleAddSensor}\n      />\n\n      <Paper className=\"table-paper\">\n        <TableVirtuoso\n          data={paginatedData}\n          components={VirtuosoTableComponents}\n          fixedHeaderContent={fixedHeaderContent}\n          itemContent={rowContent}\n        />\n      </Paper>\n\n      <Box className=\"pagination-box\">\n        <span>\n          {startIndex}-{endIndex} of {filteredData.length}\n        </span>\n        <Pagination\n          count={Math.ceil(filteredData.length / rowsPerPage)}\n          page={page + 1}\n          onChange={handlePageChange}\n          color=\"primary\"\n        />\n      </Box>\n    </div>\n  );\n}\n\nexport default SensorTable;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAChD,SACEC,SAAS,EACTC,cAAc,EACdC,QAAQ,EACRC,KAAK,EACLC,IAAI,EACJC,QAAQ,EACRC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,SAAS,QACJ,eAAe;AACtB,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,eAAe;AACtB,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAG,EAAE;AAEtB,MAAMC,OAAO,GAAG,CACd;EAAEC,KAAK,EAAE,WAAW;EAAEC,OAAO,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAI,CAAC,EACzD;EAAEF,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC5D;EAAEF,KAAK,EAAE,QAAQ;EAAEC,OAAO,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAI,CAAC,EAClD;EAAEF,KAAK,EAAE,MAAM;EAAEC,OAAO,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC9C;EAAEF,KAAK,EAAE,SAAS;EAAEC,OAAO,EAAE,SAAS;EAAEC,KAAK,EAAE,GAAG;EAAEC,OAAO,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,MAAM;EAAEC,OAAO,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC9C;EAAEF,KAAK,EAAE,qBAAqB;EAAEC,OAAO,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAI,CAAC,CAClE;AAED,MAAME,uBAAuB,GAAG;EAC9BC,QAAQ,eAAE9B,KAAK,CAAC+B,UAAU,CAAC,CAACC,KAAK,EAAEC,GAAG,kBACpCX,OAAA,CAAClB,cAAc;IACb8B,SAAS,EAAE5B,KAAM;IAAA,GACb0B,KAAK;IACTC,GAAG,EAAEA,GAAI;IACTE,SAAS,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CACF,CAAC;EACFC,KAAK,EAAGR,KAAK,iBAAKV,OAAA;IAAA,GAAWU,KAAK;IAAEG,SAAS,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACxDE,SAAS,eAAEzC,KAAK,CAAC+B,UAAU,CAAC,CAACC,KAAK,EAAEC,GAAG,kBAAKX,OAAA;IAAA,GAAWU,KAAK;IAAEC,GAAG,EAAEA;EAAI;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC;EAC3ElC,QAAQ,EAAG2B,KAAK,iBAAKV,OAAA;IAAA,GAAQU;EAAK;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACtCG,SAAS,eAAE1C,KAAK,CAAC+B,UAAU,CAAC,CAACC,KAAK,EAAEC,GAAG,kBAAKX,OAAA;IAAA,GAAWU,KAAK;IAAEC,GAAG,EAAEA;EAAI;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5E,CAAC;AAED,SAASI,WAAWA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC,MAAM;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACrE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlD,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACmD,MAAM,EAAEC,SAAS,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqD,QAAQ,EAAEC,WAAW,CAAC,GAAGtD,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACuD,UAAU,EAAEC,aAAa,CAAC,GAAGxD,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAM,CAACyD,SAAS,EAAEC,YAAY,CAAC,GAAG1D,QAAQ,CAAC;IACzC2D,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,EAAE;IACfC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACzCnB,OAAO,CAACmB,KAAK,GAAG,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,YAAY,GAAGrE,OAAO,CAAC,MAAM;IACjC,IAAI,CAACkD,MAAM,EAAE,OAAOR,IAAI;IAExB,OAAOA,IAAI,CAACQ,MAAM,CACfoB,IAAI,IACHA,IAAI,CAACX,WAAW,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACtB,MAAM,CAACqB,WAAW,CAAC,CAAC,CAAC,IAC7DD,IAAI,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACtB,MAAM,CAACqB,WAAW,CAAC,CAAC,CACzD,CAAC;EACH,CAAC,EAAE,CAAC7B,IAAI,EAAEQ,MAAM,CAAC,CAAC;EAElB,MAAMuB,aAAa,GAAGzE,OAAO,CAC3B,MAAMqE,YAAY,CAACK,KAAK,CAAC1B,IAAI,GAAG3B,WAAW,EAAE,CAAC2B,IAAI,GAAG,CAAC,IAAI3B,WAAW,CAAC,EACtE,CAACgD,YAAY,EAAErB,IAAI,CACrB,CAAC;EAED,MAAM2B,UAAU,GAAG3B,IAAI,GAAG3B,WAAW,GAAG,CAAC;EACzC,MAAMuD,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC9B,IAAI,GAAG,CAAC,IAAI3B,WAAW,EAAEgD,YAAY,CAACU,MAAM,CAAC;EAExE,MAAMC,kBAAkB,GAAGA,CAAA,kBACzB5D,OAAA,CAACjB,QAAQ;IAAA8E,QAAA,EACN3D,OAAO,CAAC4D,GAAG,CAAEC,MAAM,iBAClB/D,OAAA,CAACF,WAAW;MAEViE,MAAM,EAAEA,MAAO;MACfC,QAAQ,EACNxC,MAAM,MACLuC,MAAM,CAAC3D,OAAO,KAAK,YAAY,GAAG,MAAM,GAAG,aAAa,CAC1D;MACDqB,SAAS,EAAEA,SAAU;MACrBF,MAAM,EAAEA;IAAO,GAPVwC,MAAM,CAAC3D,OAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQpB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CACX;EAED,MAAMgD,UAAU,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAChCjE,OAAO,CAAC4D,GAAG,CAAEC,MAAM,IAAK;IACtB,MAAMf,KAAK,GACTe,MAAM,CAAC3D,OAAO,KAAK,UAAU,GACzB,GAAG+D,MAAM,CAACvB,QAAQ,KAAKuB,MAAM,CAACtB,SAAS,EAAE,GACzCsB,MAAM,CAACJ,MAAM,CAAC3D,OAAO,CAAC;IAC5B,oBACEJ,OAAA,CAACnB,SAAS;MAERgC,SAAS,EAAE,cAAckD,MAAM,CAACzD,OAAO,GAAG,kBAAkB,GAAG,EAAE,EAAG;MAAAuD,QAAA,EAEnEb;IAAK,GAHDe,MAAM,CAAC3D,OAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIV,CAAC;EAEhB,CAAC,CAAC;EAEJ,MAAMmD,eAAe,GAAIrB,KAAK,IAAK;IACjCd,WAAW,CAACc,KAAK,CAACsB,aAAa,CAAC;EAClC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BrC,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMsC,YAAY,GAAIvB,KAAK,IAAK;IAC9BjB,SAAS,CAACiB,KAAK,CAAC;IAChBsB,eAAe,CAAC,CAAC;EACnB,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7BrC,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMsC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BtC,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMuC,iBAAiB,GAAIC,CAAC,IAAK;IAC/BtC,YAAY,CAAC;MAAE,GAAGD,SAAS;MAAE,CAACuC,CAAC,CAACC,MAAM,CAACnC,IAAI,GAAGkC,CAAC,CAACC,MAAM,CAAC5B;IAAM,CAAC,CAAC;EACjE,CAAC;EAED,MAAM6B,eAAe,GAAGA,CAAA,KAAM;IAC5BnD,WAAW,CAACU,SAAS,CAAC;IACtBC,YAAY,CAAC;MACXC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,EAAE;MACVC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb,CAAC,CAAC;IACF4B,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAED,oBACEzE,OAAA;IAAKa,SAAS,EAAC,wBAAwB;IAAAgD,QAAA,gBACrC7D,OAAA,CAACb,GAAG;MAAC0B,SAAS,EAAC,YAAY;MAAAgD,QAAA,gBACzB7D,OAAA;QAAIa,SAAS,EAAC,cAAc;QAAAgD,QAAA,EAAC;MAA8B;QAAA/C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChEjB,OAAA,CAACb,GAAG;QAAC0B,SAAS,EAAC,gBAAgB;QAAAgD,QAAA,gBAC7B7D,OAAA,CAAC8E,YAAY;UACXhD,MAAM,EAAEA,MAAO;UACfiD,QAAQ,EAAER,YAAa;UACvBS,WAAW,EAAEZ,eAAgB;UAC7BpC,QAAQ,EAAEA,QAAS;UACnBiD,WAAW,EAAEX,eAAgB;UAC7BhD,IAAI,EAAEA;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,eACFjB,OAAA,CAACkF,SAAS;UAACC,OAAO,EAAEX;QAAiB;UAAA1D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENjB,OAAA,CAACoF,YAAY;MACXC,IAAI,EAAEnD,UAAW;MACjBoD,OAAO,EAAEb,iBAAkB;MAC3BrC,SAAS,EAAEA,SAAU;MACrBmD,aAAa,EAAEb,iBAAkB;MACjCc,WAAW,EAAEX;IAAgB;MAAA/D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAEFjB,OAAA,CAAChB,KAAK;MAAC6B,SAAS,EAAC,aAAa;MAAAgD,QAAA,eAC5B7D,OAAA,CAACN,aAAa;QACZ4B,IAAI,EAAE+B,aAAc;QACpBoC,UAAU,EAAElF,uBAAwB;QACpCqD,kBAAkB,EAAEA,kBAAmB;QACvC8B,WAAW,EAAEzB;MAAW;QAAAnD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAERjB,OAAA,CAACb,GAAG;MAAC0B,SAAS,EAAC,gBAAgB;MAAAgD,QAAA,gBAC7B7D,OAAA;QAAA6D,QAAA,GACGN,UAAU,EAAC,GAAC,EAACC,QAAQ,EAAC,MAAI,EAACP,YAAY,CAACU,MAAM;MAAA;QAAA7C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACPjB,OAAA,CAACH,UAAU;QACT8F,KAAK,EAAElC,IAAI,CAACmC,IAAI,CAAC3C,YAAY,CAACU,MAAM,GAAG1D,WAAW,CAAE;QACpD2B,IAAI,EAAEA,IAAI,GAAG,CAAE;QACfiE,QAAQ,EAAE/C,gBAAiB;QAC3BgD,KAAK,EAAC;MAAS;QAAAhF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACU,EAAA,CA/JQN,WAAW;AAAA0E,EAAA,GAAX1E,WAAW;AAiKpB,eAAeA,WAAW;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}