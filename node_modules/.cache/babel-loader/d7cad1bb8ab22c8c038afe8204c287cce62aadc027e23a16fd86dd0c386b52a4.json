{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import SensorTable from \"./components/SensorTable\";\n\n// const App = () => {\n//   const [sensorData, setSensorData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n//   const [sortBy, setSortBy] = useState(\"\"); \n//   const [sortOrder, setSortOrder] = useState(\"asc\"); \n//   const [filterBy, setFilterBy] = useState(\"\"); \n\n//   useEffect(() => {\n//     fetch(\"/data/sensor_readings.json\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setSensorData(data);\n//         setOriginalData(data); \n//       })\n//       .catch((error) => console.error(\"Failed to fetch data\", error));\n//   }, []);\n\n//   const handleSort = (key) => {\n//     const order = sortBy === key && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n\n//     const handleClearFilter = () => {\n//       setFilterBy(\"\");\n//       setSensorData(originalData); \n//     };\n\n//     const sortedData = [...sensorData].sort((a, b) => {\n//       if (key === \"time\") {\n//         return order === \"asc\"\n//           ? new Date(a.reading_ts) - new Date(b.reading_ts)\n//           : new Date(b.reading_ts) - new Date(a.reading_ts);\n//       } else if (key === \"sensor_type\") {\n//         const comparison = a.name.trim().localeCompare(b.name.trim());\n//         return order === \"asc\" ? comparison : -comparison;\n//       }\n//       return 0;\n//     });\n\n//     setSortBy(key); \n//     setSortOrder(order); \n//     setSensorData(sortedData); \n//   };\n\n//   const handleFilter = (sensorType) => {\n//     setFilterBy(sensorType);\n//     const filteredData = sensorType\n//       ? originalData.filter((entry) => entry.sensor_type === sensorType)\n//       : originalData;\n//     setSensorData(filteredData); \n//   };\n\n//   const handleNewSensor = (newSensor) => {\n//     setSensorData((prevData) => [...prevData, newSensor]);\n//     setOriginalData((prevData) => [...prevData, newSensor]);\n//   };\n\n//   return (\n//     <div>\n//       <SensorTable\n//         data={sensorData}\n//         onSort={handleSort}\n//         onNewSensor={handleNewSensor} \n//         filterBy={filterBy}\n//         sortBy={sortBy}\n//         sortOrder={sortOrder}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/nancy/Documents/Front-end-test-Nancy/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import SensorTable from \"./components/SensorTable\";\n\n// const App = () => {\n//   const [sensorData, setSensorData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n//   const [sortBy, setSortBy] = useState(\"\"); \n//   const [sortOrder, setSortOrder] = useState(\"asc\"); \n//   const [filterBy, setFilterBy] = useState(\"\"); \n\n//   useEffect(() => {\n//     fetch(\"/data/sensor_readings.json\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setSensorData(data);\n//         setOriginalData(data); \n//       })\n//       .catch((error) => console.error(\"Failed to fetch data\", error));\n//   }, []);\n\n//   const handleSort = (key) => {\n//     const order = sortBy === key && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n\n//     const handleClearFilter = () => {\n//       setFilterBy(\"\");\n//       setSensorData(originalData); \n//     };\n\n//     const sortedData = [...sensorData].sort((a, b) => {\n//       if (key === \"time\") {\n//         return order === \"asc\"\n//           ? new Date(a.reading_ts) - new Date(b.reading_ts)\n//           : new Date(b.reading_ts) - new Date(a.reading_ts);\n//       } else if (key === \"sensor_type\") {\n//         const comparison = a.name.trim().localeCompare(b.name.trim());\n//         return order === \"asc\" ? comparison : -comparison;\n//       }\n//       return 0;\n//     });\n\n//     setSortBy(key); \n//     setSortOrder(order); \n//     setSensorData(sortedData); \n//   };\n\n//   const handleFilter = (sensorType) => {\n//     setFilterBy(sensorType);\n//     const filteredData = sensorType\n//       ? originalData.filter((entry) => entry.sensor_type === sensorType)\n//       : originalData;\n//     setSensorData(filteredData); \n//   };\n\n//   const handleNewSensor = (newSensor) => {\n//     setSensorData((prevData) => [...prevData, newSensor]);\n//     setOriginalData((prevData) => [...prevData, newSensor]);\n//   };\n\n//   return (\n//     <div>\n//       <SensorTable\n//         data={sensorData}\n//         onSort={handleSort}\n//         onNewSensor={handleNewSensor} \n//         filterBy={filterBy}\n//         sortBy={sortBy}\n//         sortOrder={sortOrder}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}